#!/usr/bin/env node
// Test XML validation against TIA Portal exports

import { AdvancedParser } from './src/core/AdvancedParser.js';
import { XmlComparisonValidator } from './src/core/XmlComparisonValidator.js';
import { DEFAULT_VALIDATION_RULES } from './src/config/validationRules.js';

// Sample TIA Portal XML export
const sampleTiaXml = `<?xml version="1.0" encoding="UTF-8"?>
<Document>
  <DocumentInfo>
    <Created>Generated by TIA Portal</Created>
    <Name>Salzbad_Steuerung</Name>
  </DocumentInfo>
  <FB Name="Salzbad_Steuerung" Number="300">
    <Interface>
      <Sections>
        <Section Name="Static">
          <Member Name="Stap" Datatype="Array[0..31] of Bool"/>
          <Member Name="Hulp" Datatype="Array[1..32] of Bool"/>
          <Member Name="Tijd" Datatype="Array[1..10] of IEC_TIMER"/>
          <Member Name="Teller" Datatype="Array[1..10] of Int"/>
        </Section>
      </Sections>
    </Interface>
    <Implementation>
      <FBD>
        <Network Title="SCHRITT 0">
          <Comment>Hauptprogramm Salzbad Steuerung</Comment>
        </Network>
        <Network Title="SCHRITT 1">
          <Comment>Selektiere Horde für Salzbad</Comment>
        </Network>
        <Network Title="SCHRITT 2">
          <Comment>Warten auf Freigabe</Comment>
        </Network>
        <Network Title="SCHRITT 3">
          <Comment>Befüllen Salzbad</Comment>
        </Network>
        <Network Title="SCHRITT 4">
          <Comment>Überwachung</Comment>
        </Network>
        <Network Title="SCHRITT 5">
          <Comment>Entleeren</Comment>
        </Network>
        <Network Title="SCHRITT 6">
          <Comment>Fertig</Comment>
        </Network>
      </FBD>
    </Implementation>
  </FB>
</Document>`;

// Corresponding program content
const programContent = `Hauptprogramm Salzbad Steuerung FB300
Symbolik IDB: Salzbad_Steuerung

// Initialisierung der Käsezähler
Käsezähler Anfang T10B: Zählt die Käseeinheiten am Anfang
Variable 1 (Aktive Einfuhrhorde) = 21
Variable 2 (Maximale Kapazität) = 100

RUHE: Hauptprogramm Salzbad Steuerung
Freigabe Start Salzbad
DT Start Salzbad
Horde[Vorselektierte Horde 1e Befüllung].Etage_Daten[1].Status = 0

SCHRITT 1: Selektiere Horde für Salzbad
Horde vorselektiert (Selektionsprogramm Horde FB102 SCHRITT 2+5+8)
Erwünschte Etage für vorselektierte Horde: 1

SCHRITT 2: Warten auf Freigabe
[
  Freigabe Salzbad Tank A
  + Freigabe Salzbad Tank B  
  + Freigabe Salzbad Tank C
]
// Warten bis mindestens ein Tank verfügbar ist

SCHRITT 3: Befüllen Salzbad
Füllen Tank aktiv (Befüllung Salzbad Tank A FB124 SCHRITT 3)
NICHT Störung: Käse am Blockierung Tank A
Salzkonzentration >= 15.5
Tank A.Status ist OK

SCHRITT 4: Überwachung
Zeit 300sek ??
Temperatur < 25.0
Käsezähler Anfang T10B == Käsezähler Ende T10B + 1

SCHRITT 5: Entleeren
Horde[Aktive Horde].Etage_Daten[2].Reihe_Daten[1].Status = 1
Entleeren komplett (Entleeren Salzbad Tank A FB124 SCHRITT 7)

SCHRITT 6: Fertig
Freigabe Start Salzbad = RUHE
// Programm kehrt zum Ruhezustand zurück`;

async function testXmlValidation() {
  console.log('🧪 Testing XML Validation against TIA Portal export...');
  console.log('');
  
  // Parse the program content
  const parser = new AdvancedParser({}, DEFAULT_VALIDATION_RULES);
  const parseResult = parser.parseText(programContent);
  
  console.log('📊 Parse Results:');
  console.log(`  Programs: ${parseResult.programs.length}`);
  console.log(`  Steps: ${parseResult.steps.length}`);
  console.log(`  Variables: ${parseResult.variables.length}`);
  console.log(`  Variable Assignments: ${parseResult.variableAssignments.length}`);
  console.log(`  Comments: ${parseResult.comments.length}`);
  console.log(`  Cross-references: ${parseResult.crossReferences.length}`);
  console.log('');
  
  // Initialize XML validator
  const validator = new XmlComparisonValidator();
  
  // Run validation
  const validationResult = validator.validateAgainstXml(parseResult, sampleTiaXml);
  
  // Generate and display report
  const report = validator.generateReport(validationResult);
  console.log(report);
  
  // Show detailed step comparison
  console.log('🔍 Detailed Step Comparison:');
  console.log('Expected (from XML):');
  const xmlData = validator.parseXmlContent(sampleTiaXml);
  xmlData.steps.forEach(step => {
    console.log(`  SCHRITT ${step.number}`);
  });
  
  console.log('\nActual (from parser):');
  const parsedSteps = parseResult.steps.filter(s => s.type === 'SCHRITT');
  parsedSteps.forEach(step => {
    console.log(`  SCHRITT ${step.number}: ${step.description}`);
  });
  
  // Show variable comparison
  console.log('\n📝 Variable Comparison:');
  console.log('Expected (from XML):');
  xmlData.variables.forEach(variable => {
    console.log(`  ${variable.name}: ${variable.datatype}`);
  });
  
  console.log('\nActual (from parser):');
  if (parseResult.variableAssignments.length > 0) {
    parseResult.variableAssignments.forEach(assignment => {
      console.log(`  ${assignment.name}: ${assignment.value}`);
    });
  } else {
    console.log('  No variable assignments detected');
  }
  
  // Show cross-reference comparison
  console.log('\n🔗 Cross-Reference Analysis:');
  if (parseResult.crossReferences.length > 0) {
    parseResult.crossReferences.forEach(ref => {
      console.log(`  ${ref.program} → ${ref.referencedProgram || 'unknown'}`);
    });
  } else {
    console.log('  No cross-references detected in current format');
  }
  
  // Show normalized references (from AdvancedParser)
  if (parseResult.normalizedReferences) {
    console.log('\n🎯 Normalized References:');
    parseResult.normalizedReferences.forEach(ref => {
      console.log(`  ${ref.description} → ${ref.standardizedFormat}`);
    });
  }
  
  // Performance metrics
  console.log('\n⚡ Performance Metrics:');
  console.log(`  Parsing efficiency: ${validationResult.statistics.passedTests}/${validationResult.statistics.totalTests} tests passed`);
  console.log(`  Content preservation: ${validationResult.warnings.length} warnings`);
  console.log(`  Critical errors: ${validationResult.errors.length} errors`);
  
  // Recommendations
  if (!validationResult.passed) {
    console.log('\n💡 Recommendations for improvement:');
    console.log('- Check step sequence detection patterns');
    console.log('- Improve variable assignment recognition');
    console.log('- Enhance cross-reference parsing');
    console.log('- Consider adding more specific XML patterns');
  } else {
    console.log('\n✅ All tests passed! Parser output matches TIA Portal expectations.');
  }
  
  return validationResult;
}

// Run the test
testXmlValidation().catch(console.error);